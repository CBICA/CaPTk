#!/bin/bash

# Linux makeself installer
# NOTE: This is NOT a script intended to be run as a part of the linux build or configuration process!
# It is meant to be bundled within makeself to install the binaries to the correct directories.

set -o pipefail

AcceptLicense="FALSE"
CheckDiskSpace=TRUE
Progress=TRUE
OutputMsg="echo"	# value of the variable will be executed, not checked
target_dir=""		# initialize to null

install_captk () {
  target_dir=$1
  $OutputMsg "Installing to: ${target_dir}"
  # Prep stage

  # Check for file
  if [ -f ${target_dir}/CaPTk ]
  then
    echo "Fatal: ./CaPTk exists and is a file, not a directory" 1>&2
    echo "To install, please ensure this file is renamed or moved" 1>&2
    exit 1
  fi

  # Check for directory
  if [ -d ${target_dir}/CaPTk ]
  then
    $OutputMsg "${target_dir}/CaPTk exists. Proceeding..."
  else
    $OutputMsg "Creating ${target_dir}/CaPTk/..."
    mkdir -p ${target_dir}/CaPTk/
    if [ $? != 0 ] ; then
    	echo "Failed to create target directory \"${target_dir}/CaPTk/\"" 1>&2
	exit 1
    fi
  fi

  # Version number. 'version' file should be provided by captk-pkg
  ver=`cat version`
  if [ $? != 0 ] ; then
  	echo "Error determining the version of CaPTk, cannot install." 1>&2
	exit 1
  fi

  # Check version dir/file
  if [ -f ${target_dir}/CaPTk/${ver} ]
  then
    echo "Fatal: ${target_dir}/CaPTk/${ver} exists and is a file, not a directory" 1>&2
    echo "To install, please ensure this file is renamed or moved" 1>&2
    exit 1
  fi

  # Check for directory
  if [ -d ${target_dir}/CaPTk/${ver} ]
  then
    $OutputMsg "${target_dir}/CaPTk/${ver} exists. Proceeding..."
  else
    $OutputMsg "Creating ${target_dir}/CaPTk/${ver}/..."
    mkdir ${target_dir}/CaPTk/${ver}/
    if [ $? != 0 ] ; then
    	echo "Failed to create installation directory \"${target_dir}/CaPTk/${ver}\"" 1>&2
	exit 1
    fi
  fi


  if [ $CheckDiskSpace = "TRUE" ] ; then
  	# Check disk space
  	$OutputMsg "Checking disk space..."
	
  	# Total free disk space is gotten with df . and we want the "availible" column. 
  	# This is in kb so we need to convert to b as well
  	# The middle part gets df, gets the last line of output, and gets the 4th column
  	# the rest of it gets the result of that in bytes
  	freedisk=`echo "$(df . | tail -n -1 | awk '{print $3}') * 1024" | bc -l`
	
  	# Used space is gotten by analyzing the CaPTk.bin file with ls -l
  	useddisk=`ls -l CaPTk.bin | awk '{print $5}'`
	
  	if [ ${useddisk} -gt ${freedisk} ]
  	then
    		echo "Not enough free space on disk for operation. Aborting installation." 1>&2
    		exit 1
  	fi
  fi

  # Check for FUSE
  $OutputMsg "Checking for FUSE..."

  fusefail=0

  # Redirect fusermount output          
  fusermount -V 2> /dev/null

  if [ $? -ne 0 ]
  then
    fusefail=1
    echo "Warning: FUSE is not installed. See https://github.com/CBICA/CaPTk/wiki/GNU-Linux-Installer-Troubleshooting#dlopen-error-loading-libfuseso2-fuse-not-installed for further information. The AppImage will continue installation as normal." 1>&2
  fi

  # Move file but preserve pid
  mv ./CaPTk.bin ${target_dir}/CaPTk/${ver}/CaPTk-${ver}.bin 2>/dev/null &
  pid=$!
    

  if [ $PROGRESS != "FALSE" ] ; then
  	# The latest in bash spinner technology from npm
  	spin='-\|/'
	
  	# Show a spinner until the file is done moving
  	i=0
  	while kill -0 $pid 2>/dev/null
  	do
    		i=$(( (i+1) %4 ))
    		printf "\rInstalling... ${spin:$i:1}"
    		sleep .1
  	done
  	printf "\n"
  fi

  # Last case -- need to sleep first to avoid some weird behavior where it doesn't catch the existence of the file
  sleep 3 
  chmod +x ${target_dir}/CaPTk/${ver}/CaPTk-${ver}.bin
  if [ $? -ne 0 ]; then
    echo "WARNING: It appears as if something is wrong with your installation. Please make sure there is enough room on your disk, and that CaPTk-${ver}.bin is present under ./CaPTk" 1>&2
    exit 1
  fi

  # CWL
  $OutputMsg "Installing CWL"
  mv ./*.cwl ${target_dir}/CaPTk/${ver}/ 2>/dev/null

  # Creating a symbolic link
  $OutputMsg "Creating symbolic link 'captk'"
  cd ${target_dir}/CaPTk/${ver}/
  ln -s ./CaPTk-${ver}.bin captk

  # Display any warnings at the end
  if [ ${fusefail} -eq 1 ]
  then
    echo "WARNING: You may have issues running the AppImage since FUSE was not detected on your filesystem; please extract the installation files using the \"./CaPTk/${ver}/captk --appimage-extract\" option" 1>&2
  fi

  $OutputMsg "Done."
  $OutputMsg "To run CaPTk, enter the command \"${target_dir}/CaPTk/${ver}/captk\" in your console."
}


parse () {
# Parse the command line options, to be compliant with the options that makeself claims the script will support:
#	  --confirm             Ask before running embedded script
#	  --quiet               Do not print anything except error messages
#	  --accept              Accept the license
#	  --noexec              Do not run embedded script
#	  --keep                Do not erase target directory after running
#	                        the embedded script
#	  --noprogress          Do not show the progress during the decompression
#	  --nox11               Do not spawn an xterm
#	  --nochown             Do not give the extracted files to the current user
#	  --nodiskspace         Do not check for available disk space
#	  --target dir          Extract directly to a target directory (absolute or relative)
#	                        This directory may undergo recursive chown (see --nochown).
#	  --tar arg1 [arg2 ...] Access the contents of the archive through the tar command

	while [ "X$1" != "X" ] 
	do
		case $1 in
		 	--confirm)
				echo "The option \"$1\" is not implemented in the CaPTk installer at this time. Continuing." 1>&2
				shift
				;;


			--quiet)
				OutputMsg=false	# set to "true", will execute a no-op
				shift
				;;


			--accept)
				AcceptLicense="TRUE"
				shift
				;;


			--noexec)
				echo "The option \"$1\" is not implemented in the CaPTk installer at this time. Continuing." 1>&2
				shift
				;;


			--keep)
				echo "The option \"$1\" is not implemented in the CaPTk installer at this time. Continuing." 1>&2
				shift
				;;


			--noprogress)
				PROGRESS="FALSE"
				shift
				;;


			--nox11)
				echo "The option \"$1\" is not implemented in the CaPTk installer at this time. Continuing." 1>&2
				shift
				;;


			--nochown)
				echo "The option \"$1\" is not implemented in the CaPTk installer at this time. Continuing." 1>&2
				shift
				;;


			--nodiskspace)
				CheckDiskSpace=FALSE
				shift
				;;

			--target)
				shift
				target_dir="$1"
				shift
				;;

			--tar)
				echo "The option \"$1\" is not implemented in the CaPTk installer at this time. Continuing." 1>&2
				shift

				# There will be an arbitrary number of options to "tar" that must be thrown away
				while [[ "X$1" != "X" ]]
				do
					if [[ "$1" =~ --* ]] ; then
						# We have an argument with leading "--", so that's the end of the args to tar
						break
					else
						# this arg belongs to tar. Move along comrade, nothing to see here.
						shift
					fi
				done
				;;


			*)
				echo "Unrecognized option: \"$1\"" 1>&2
				exit 1
				;;

		esac
	done
}


parse $*

if [ $OutputMsg != "false" ] ; then
	# Print license with a reader
	cat ./LICENSE | more
	if [ $? != 0  ] ; then
		echo "Error displaying license file. Cannot install." 1>&2
		exit 1
	fi
fi

if [ "X${target_dir}" = "X" ] ; then
	# no user-specified target directory, try to fall back to something useful
	if [[ ${PWD} == *"tmp"* ]]; then
  		target_dir=${USER_PWD}
	else
 	 	target_dir=${PWD}
	fi
fi

if [ $AcceptLicense = "FALSE" ] ; then
  	read -p "I accept the terms of the licenses above [Y/N] " choice
  	case "$choice" in 
    		[yY][eE][sS]|[yY]) true ; break ;;

    		[nN][oO]|[nN]) $OutputMsg "Goodbye" ; exit 0 ;;

    		* ) echo "Invalid response: \"$choice\"" 1>&2 ; exit 1 ;;
  	esac
fi

# We only get here if the user agreed to the license, either interactively or via the "--accept" flag
install_captk ${target_dir}
