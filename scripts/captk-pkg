#!/bin/bash

#
# CaPTk-Pkg
#
# This script is an automated configurator, builder, linker, and package deployer for linux builds of CaPTk.
# It's intended use is to be as a standalone end-to-end from source to finished deployable binary builder
#
# There's a lot going on here becasue of the way certain things function on linux, the way multiple OS development works
# and the fact no one has actually done this before, so there are plenty of quirks that need to be overcome as a part of this script
#
# REQUIREMENTS
# 
# This script implies you have the following:
# - Built the dependency manager/superbuild and generally understand how the superbuild works
# - Installed Qt via the installer on their website, preferably for the LTS (at this time 5.12 as of 12/14/2018)
# - Added the Qt library to the $PATH and $LD_LIBRARY_PATH via .bashrc
#   - Should look like: 
#     export PATH=/home/${USER}/Qt/5.12.1/gcc_64/bin:$PATH
#     export PATH=/home/${USER}/Qt/5.12.1/gcc_64/libexec:$PATH
#     export PATH=/home/${USER}/Qt/5.12.1/gcc_64/lib/cmake/Qt5:$PATH
#     export LD_LIBRARY_PATH=/home/${USER}/Qt/5.12.1/gcc_64/lib
# ! NOTE: make sure to switch those directories with the relevant paths to your respective build locations. This is NOT a swap in addition!
# - MCR folder is present in src/applications/individualAppls/libra that contains the extracted v84 MATLAB created from the MCRInstaller
# ALTERNATIVELY, MCR.zip in the binaries folder can be extracted to the above location (in that libra folder) and everything should work out fine
# - NOTE: This last thing should be put in via git-lfs otherwise you can install libra normally, move the folder back there, 
# and then re-build CaPTk with this script. Hopefully LIBRA will be implemented in C++ sometime in the future.
# - Have dos2unix, g++, make, cmake, and libgl-dev installed. They are all availible from aptitude
# 
# A final note:
# Please make sure you read through this script before modifying it. Provided you have the following prerequisites, you should be able to build
# CaPTk packages for linux using this script without modifications.

# HOW IT WORKS
#
# This script works by:
# - Configuring cmake to the proper linux-specific settings for linuxdeployqt
# - Builds the project with make -j
# - Installs project to a very specific set of subdirectories for linuxdeployqt
# - Runs a set of fixes that otherwise would render specific features useless without them
# - Neatly packages an AppImage with linuxdeployqt
# - Wraps the AppImage in an installer that displays the license to the user, that then places the AppImage in the user's home/CaPTk folder
#

# HOW TO USE IT
#
# From the project root, run ./scripts/captk-pkg
# Make sure you are in the root. It won't work otherwise
#

# MORE INFORMATION
# Read more on the wiki: https://github.com/CBICA/CaPTk/wiki/GNU-Linux-Packaging-Deploying-Qt-on-Linux

# Set -e causes any subsequent commands which fail will cause the shell script to exit immediately.
# This is here because typically, bash just plows through errors, and that's an awful thing.
# When interacting with users, or helping them with this script, they may not know what error is important.
# With this, they'll see the first error and the script will terminate.
set -e

# Enable globstar. Technically doesn't work in the one place we need it to right now, see more below
shopt -s globstar

# Store the root dir this is being run from
SRC_DIR=`pwd`

# Check to make sure MCR is present
#if [ ! -d "./src/applications/individualApps/libra/MCR" ]; then
  #echo "[!] MCR Not found, installing..."
  #unzip ./binaries/MCR.zip
  #mv MCR ./src/applications/individualApps/libra/
  #echo "[:] Done installing MCR component."
#fi

# get version of GNU tool - taken from https://stackoverflow.com/a/25845393
toolversion() {
    local prog="$1" operator="$2" value="$3" version

    version=$($prog --version | awk '{print $NF; exit}')

    awk -vv1="$version" -vv2="$value" 'BEGIN {
        split(v1, a, /\./); split(v2, b, /\./);
        if (a[1] == b[1]) {
            exit (a[2] '$operator' b[2]) ? 0 : 1
        }
        else {
            exit (a[1] '$operator' b[1]) ? 0 : 1
        }
    }'
}

# Run the fixes for linux, assume being ran from build folder (./bin)
RUN_FIXES () {

  # Save install dir location
  cd install
  INSTALL_DIR=`pwd`

  # Save the usr dir location
  cd ./appdir/usr/
  USR_DIR=`pwd`

  echo "[:] Deleting the sym-link that was created by CMake to ensure packaging happens properly"
  rm -rf bin/captk

  echo "[:] Adding proper qmake to PATH..."
  export PATH=`pwd`/bin/qt/5.12.1/bin:$PATH

  echo "[:] Running Linux Fixes..."

  # Fix 1: LIBRA is awful on linux, and it only gets worse from here
  # 
  # For some reason LIBRA won't get added to the bin or libexec folders,
  # so we just manually do it
  # In addition LIBRA needs the Matlab runtime with one VERY SPECIFIC file
  # to be marked as executable or else the whole thing WILL NOT work. We'll get to that in a second.
  echo "[:] Adding LIBRA..."
  cd ${SRC_DIR}
  # # nothing do here since the installation has happened via CMake
  # cp ./src/applications/individualApps/libra/bin/libra ./bin/install/appdir/usr/bin/
  # cp ./src/applications/individualApps/libra/libexec/libra ./bin/install/appdir/usr/libexec/
  # cp ./src/applications/individualApps/libra/libexec/MCR/bin/glnxa64/matlab_helper ./bin/install/appdir/usr/libexec/MCR/bin/glnxa64/matlab_helper
  #cp -r ./src/applications/individualApps/libra/MCR ./bin/install/appdir/usr/libexec/\

  # Move into install
  cd ./bin/install/appdir/usr

  # Fix 2: WebEngine stuff
  #
  # From what I understand, linuxdeployqt will pull in all the required packages, binaries and link them dynamically
  # so that it can wrap that in an AppImage so those links are preserved at runtime.
  #
  # However, the WebEngine requires libraries that chromium uses (Since it's literally just a chromium instance)
  # but for SOME reason linuxdeployqt doesn't pull in. So we need to manually add these nss libraries in for the webengine
  # to work.
  echo "[:] Adding NSS libs..."
  if [ -d "/usr/lib/x86_64-linux-gnu/nss" ]; then
    cp /usr/lib/x86_64-linux-gnu/nss/* ./lib
  else
    cp -r /usr/lib64/nss/* ./lib
  fi

  # Fix 3: LIBRA was made on windows and none of the stuff is marked as executable by default
  # All of these need to be exec or else it flat out doesnt work.
  # Needs to be marked as executable for LIBRA

  echo "[:] Marking MATLAB binaries as executable..."

  # # The magic file that we need to be executable from earlier
  cd ./libexec/MCR/v84/bin/glnxa64
  chmod +x matlab_helper

  # Go back up to /bin
  cd ${USR_DIR}/bin
  
  # Fix 4: DOS sucks and that file format cannot be run on linux so an external tool is needed
  # to mark them as usable

  echo "[:] Running dos2unix..."

  # Libra needs it
  dos2unix libra
  chmod +x libra
  # So does confetti
  dos2unix ConfettiGUI.py
  chmod +x ConfettiGUI.py
  # And also the files in libexec
  cd ../libexec
  dos2unix ConfettiCore.py
  chmod +x ConfettiCore.py
  chmod +x libra

  # Go back up to install root, we're done with our fixes.
  cd ${INSTALL_DIR}
}

# Linuxdeployqt packaging command
RUN_DEPLOYQT () {

  # Download linuxdeployqt and mark it as executable
  echo "[:] Downloading linuxdeployqt..."
  LDQT="linuxdeployqt-6-x86_64.AppImage"
  wget -nc https://github.com/probonopd/linuxdeployqt/releases/download/6/${LDQT}
  chmod +x ${LDQT}

  # Okay here's where it gets insane
  # So we need to run linuxdeployqt, and show it where our *.desktop files are so it can generate an AppImage that
  # properly can provide a direct link to the CaPTk binary within the /bin folder of the appdir structure
  #
  # After that it attempts to link EVERYTHING IT CAN FIND
  # Yes, that means at some point it will try to link the **ENTIRE** MATLAB runtime and ITK-snap libraries even though they don't need it
  # So this insane regex was created to make sure linuxdeployqt just flat out recursively ignores those directories

  # So there are two directories that we don't need to link: matlab and ITK snap
  # The issue is that linuxdeployqt cannot for the life of it process globstars (**) for some reason, meaning we cannot simply exclude MCR/** and be done,
  # no, we need to manually come up with a glob for EVERY possible directory hierarchy for MCR, leaving us with this.
  # Using continuous release as of 3/5/18, please change to version 5 or 6 if you are having issues with this.
  ./${LDQT} ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -always-overwrite -ignore-glob=usr/{libexec/MCR/**,lib/snap-3.8.0/**,libexec/MCR/*/*,libexec/MCR/*/*/*,libexec/MCR/*/*/*/*,libexec/MCR/*/*/*/*/*,libexec/MCR/*/*/*/*/*/*,libexec/MCR/*/*/*/*/*/*/*,libexec/MCR/*/*/*/*/*/*/*/*,libexec/MCR/*/*/*/*/*/*/*/*/*,libexec/MCR/*/*/*/*/*/*/*/*/*/*}
  # ./${LDQT} ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -always-overwrite 
  # But now we aren't even done. Normally, you could run linuxdeployqt with the -appimage flag which gives us our amazing AppImage file that can be ran anywhere.
  # However, we have started to see a lot of issues revolving around the $LD_LIBRARY_PATH since we want to arbitrarily run applications from the main CaPTk binary.
  # The solution is to wrap the entry of the AppImage according to this guide made by the guy who made AppImages: https://github.com/probonopd/linuxdeployqt/wiki/Custom-wrapper-script-instead-of-AppRun
  
  # Replace AppRun
  rm ./appdir/AppRun
  cp ../../data/applications/AppRun ./appdir/
  # cp ../../data/applications/CaPTk.desktop ./appdir/

  if [ -z "$PKG_COPY_QT_LIBS" ]; then
  
    echo "[:] Will not try to hard-copy Qt libraries"

  else

    # manually copy qt libs to ensure everything is picked up properly
    echo "[:] Testing Qt library copy"
    qmake_path="$(which qmake)"
    qt_libs_path="$(dirname "${qmake_path}")/../lib"
    cp ${qt_libs_path}/*.so ./appdir/usr/lib/
    cp ${qt_libs_path}/*.so.5 ./appdir/usr/lib/
    # we only support the copy of qt 5.11 and 5.12
    count=`ls -1 ${qt_libs_path}/*.so.5.11 2>/dev/null | wc -l`
    if [ $count != 0 ]; then cp ${qt_libs_path}/*.so.5.11 ./appdir/usr/lib/; cp ${qt_libs_path}/*.so.5.11.* ./appdir/usr/lib/ ; fi ;
    count=`ls -1 ${qt_libs_path}/*.so.5.12 2>/dev/null | wc -l`
    if [ $count != 0 ]; then cp ${qt_libs_path}/*.so.5.12 ./appdir/usr/lib/; cp ${qt_libs_path}/*.so.5.12.* ./appdir/usr/lib/ ; fi ;

  fi

  # Download and mark executable appimagetool. Using release 11 as of 3/5/18
  wget -nc https://github.com/AppImage/AppImageKit/releases/download/11/appimagetool-x86_64.AppImage
  chmod +x appimagetool-x86_64.AppImage

  # Build the AppImage
  ./appimagetool-x86_64.AppImage ./appdir

  # Move the appimage up to the root
  mv ./CaPTk*.AppImage ../../CaPTk.bin

  # And likewise move there as well
  cd ../../

}

# Usage. Currently unused
usage () {
  echo "CaPTk Packager for Linux"
  echo ""
  echo "  ${0} is an automated linux packager for CaPTk. Make sure to run it from the project root, and"
  echo "  pass in the location to your built ITK directory if it isn't in your path"
  exit 0
}

echo "[:] Starting CaPTk packaging process..."

echo "[?] Checking if you are in trunk..."
# Test to see if the user is in trunk
# First see if CMakeLists.txt exists
if [[ -e CMakeLists.txt ]] ; then
  # See if it contains PROJECT( CaPTk )
  if [[ -z  `cat CMakeLists.txt | grep "PROJECT( CaPTk )"`  ]] ; then
    echo "[!] Error: You do not appear to be within trunk of CaPTk (Project is not CaPTk)"
    exit -1
  fi
else
  echo "[!] Error: You do not appear to be in trunk (CMakeLists.txt not found)"
  exit -1
fi

# Create binary directory
echo "[:] Creating binary directory..."
mkdir -p bin
cd bin

if [ -z "$CAPTK_BUILD_THREADS" ]; then

  CAPTK_BUILD_THREADS=2

fi

# Optional flag one can set in the terminal to skip the double build process, used in Azure
if [ -z "$PKG_FAST_MODE" ]; then

  # Check for existing install folder, and trash it if it exists. We do this to make sure the binaries are overwritten
  if [ -d "install" ]; then
    echo "[:] Cleaning up previous build..."
    rm -rf ./install/
  fi

  # Superbuild
  # Configure cmake
  echo "[:] Running cmake command for superbuild..."
  bash ../scripts/linux-cmake-conf

  # Make install/strip
  echo "[:] Building superbuild..."
  make -j$CAPTK_BUILD_THREADS

  # CaPTk
  # Configure cmake
  echo "[:] Running cmake command for CaPTk..."
  bash ../scripts/linux-cmake-conf

  # Make install/strip
  echo "[:] Building CaPTk..."
  make -j$CAPTK_BUILD_THREADS install/strip

else

  echo "[!] Fast mode enabled!"

  # Make install/strip
  echo "[:] Installing CaPTk..."
  make -j$CAPTK_BUILD_THREADS install/strip

fi

# Install docs
echo "[:] Installing docs..."
cp -r ../docs install/appdir/usr/

# We need to fix the project first
RUN_FIXES

if toolversion ldd '>=' 2.24; then
  echo "Too high a version of LDD detected; AppImage will potentially be unsupported, skipping packaging."
else
  # Install and deploy
  RUN_DEPLOYQT
fi

echo "[:] Building Installer..."

# Now that we have a custom AppImage, we need to package around it an installer with makeself.
# You can read more about it but it basically creates a temporary filesystem/disk that you can read and move files from, kind of like an AppImage but it creates 
# a zipfile attached to a shell script as output.

# Step 1: Get makeself, and extract it
wget -nc https://github.com/megastep/makeself/releases/download/release-2.4.0/makeself-2.4.0.run
chmod +x ./makeself-2.4.0.run
./makeself-2.4.0.run
rm makeself-2.4.0.run

# Step 2: Create a package directory for makeself to package
mkdir pkg
# We package the AppImage, the license, and a script to display the agreement and install the AppImage
mv CaPTk.bin ./pkg/
# Move cwl in
cp ./data/cwlFiles/*.cwl ./pkg/
# Move license in
cp ./LICENSE ./pkg/
# Move installer in
cp ./scripts/linux-makeself ./pkg/
chmod +x ./pkg/linux-makeself

# Create version file
# This should always create a file because the installer script needs the version number and won't have access to the cmake
# Save version as variable

# picking up the version from the CMakeCache, because what is where the real version gets populated
str=`cat bin/CMakeCache.txt | grep PROJECT_VERSION | awk '{print $1}'`
ver=${str#*=}
echo "Creating installer for CaPTk version ${ver}"

# Should not be an issue to write to this file considering that pkg is created and destroyed in this script
echo ${ver} >> ./pkg/version

# Step 3: Wrap it all upp

# Create the installer
./makeself-2.4.0/makeself.sh --gzip pkg/ CaPTk_${ver}_Installer.bin "CaPTk Linux Installer" ./linux-makeself

# Cleanup
rm -rf ./pkg
rm -rf ./makeself-2.4.0*

# Done
echo "[:] Done. Created installer"
